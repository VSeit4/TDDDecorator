import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.suite.api.IncludeTags;
import org.junit.platform.suite.api.SelectClasses;
import org.junit.platform.suite.api.Suite;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

// Step 1: Define the custom annotation
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Tag("fast")
public @interface FastTest {
}

// Step 2: Example test class using the custom annotation
class ExampleTests {

    @FastTest
    void testFastFeature() {
        System.out.println("Fast test executed");
        // Assertions or logic for fast test
    }

    @Test
    void testRegularFeature() {
        System.out.println("Regular test executed");
        // Assertions or logic for regular test
    }
}

// Step 3: Suite configuration for running only @FastTest tagged tests
@Suite
@SelectClasses(ExampleTests.class)
@IncludeTags("fast")
class FastTestSuite {
}

// Step 4: Main runner or configuration
public class TestRunner {
    public static void main(String[] args) {
        // Example of running the suite programmatically if needed
        org.junit.platform.engine.discovery.DiscoverySelectors.selectClass(FastTestSuite.class);
    }
}

@ParameterizedTest(name = "{index} {0} is 30 days long")
@EnumSource(value = Month.class, names = {"APRIL", "JUNE", "SEPTEMBER", "NOVEMBER"})
void someMonths_Are30DaysLong(Month month) {
    final boolean isALeapYear = false;
    assertEquals(30, month.length(isALeapYear));
}
@ParameterizedTest
@CsvSource({"test,TEST", "tEst,TEST", "Java,JAVA"})
void toUpperCase_ShouldGenerateTheExpectedUppercaseValue(String input, String expected) {
    String actualValue = input.toUpperCase();
    assertEquals(expected, actualValue);
}

  @Test
  public void erwarteExceptionTest() {
    assertThrows(IllegalArgumentException.class, () -> this.konvertiereInPositiveGanzzahl(null));
    assertThrows(IllegalArgumentException.class, () -> this.konvertiereInPositiveGanzzahl(""));
    assertThrows(IllegalArgumentException.class, () -> this.konvertiereInPositiveGanzzahl("-1"));
    assertThrows(IllegalArgumentException.class, () -> this.konvertiereInPositiveGanzzahl("xy"));
    assertThrows(IllegalArgumentException.class, () -> this.konvertiereInPositiveGanzzahl("1.3"));
  }